PREFIX	dc: <http://purl.org/dc/elements/1.1/>
PREFIX	dcterms: <http://purl.org/dc/terms/>
PREFIX	s: <http://schema.org/>
PREFIX	bs: <https://bioschemas.org/>
PREFIX	bswfprofile: <https://bioschemas.org/profiles/ComputationalWorkflow/>
PREFIX	bsworkflow: <https://bioschemas.org/ComputationalWorkflow#>
PREFIX	rocrate: <https://w3id.org/ro/crate/>
PREFIX	wfcrate: <https://w3id.org/workflowhub/workflow-ro-crate/>
PREFIX	wfhprofile: <https://about.workflowhub.eu/Workflow-RO-Crate/>
PREFIX	wrprocess: <https://w3id.org/ro/wfrun/process/>
PREFIX	wrwf: <https://w3id.org/ro/wfrun/workflow/>
PREFIX	wrterm: <https://w3id.org/ro/terms/workflow-run#>
PREFIX	wikidata: <https://www.wikidata.org/wiki/>
PREFIX	wfexs: <shttp:///>

SELECT ?container ?container_additional_type ?type_of_container ?type_of_container_type ?container_registry ?container_name ?container_tag ?container_sha256 ?container_platform ?container_arch
WHERE   {
    # This first part is just matching
    # Workflow RO-Crates and its main entity
    ?rocratejson
        a s:CreativeWork ;
        dcterms:conformsTo ?rocrateprofile ;
        s:about ?rootdataset .
    ?rootdataset a s:Dataset .
    FILTER (
        STRSTARTS(str(?rocrateprofile), str(rocrate:))
    ) .
    ?rocratejson dcterms:conformsTo ?wfcrateprofile .
    FILTER (
        ?wfcrateprofile = wfhprofile: || STRSTARTS(str(?wfcrateprofile), str(wfcrate:))
    ) .
    ?rootdataset
        s:mainEntity ?mainentity .
    ?mainentity
        a bs:ComputationalWorkflow ;
        dcterms:conformsTo ?bsworkflowprofile .
    FILTER (
        STRSTARTS(str(?bsworkflowprofile), str(bswfprofile:))
    ) .

    # We are assuming the workflow is the original, instead of a derivation
    {
        {
            FILTER NOT EXISTS {
                ?mainentity s:softwareRequirement ?container.
            }
            ?mainentity s:softwareAddOn ?container.
        } UNION {
            FILTER NOT EXISTS {
                ?mainentity s:softwareAddOn ?container.
            }
            ?mainentity s:softwareRequirements ?container.
        }
    }
    ?container
        a wrterm:ContainerImage ;
        s:additionalType ?container_additional_type .
    OPTIONAL {
        ?container
            s:softwareRequirements ?container_type ;
            s:applicationCategory ?type_of_container .
        ?container_type
            a s:SoftwareApplication ;
            s:applicationCategory ?type_of_container_type .
        FILTER(
            STRSTARTS(str(?type_of_container), str(wikidata:)) &&
            STRSTARTS(str(?type_of_container_type), str(wikidata:))
        ) .
    }
    OPTIONAL {
        ?container wrterm:registry ?container_registry .
    }
    OPTIONAL {
        ?container s:name ?container_name .
    }
    OPTIONAL {
        ?container wrterm:tag ?container_tag .
    }
    OPTIONAL {
        ?container wrterm:sha256 ?container_sha256 .
    }
    OPTIONAL {
        ?container
            a s:SoftwareApplication ;
            s:operatingSystem ?container_platform .
    }
    OPTIONAL {
        ?container
            a s:SoftwareApplication ;
            s:processorRequirements ?container_arch .
    }
}
